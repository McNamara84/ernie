name: Playwright UI Tests
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    name: Playwright (${{ matrix.browser }})
    steps:
    - uses: actions/checkout@v4
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        tools: composer:v2
    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
    - name: Install Node dependencies
      run: npm ci
    - name: Install PHP dependencies
      run: composer install --no-interaction --prefer-dist --optimize-autoloader
    - name: Build assets for CI
      run: npm run build
      env:
        NODE_ENV: production
        APP_ENV: local
        APP_URL: http://127.0.0.1:8000
        ASSET_URL: http://127.0.0.1:8000
        VITE_APP_URL: http://127.0.0.1:8000
    - name: Prepare application
      run: |
        cp .env.example .env
        sed -i 's/^DB_CONNECTION=.*/DB_CONNECTION=sqlite/' .env
        sed -i '/^DB_HOST=/d' .env
        sed -i '/^DB_PORT=/d' .env  
        sed -i '/^DB_DATABASE=/d' .env
        sed -i '/^DB_USERNAME=/d' .env
        sed -i '/^DB_PASSWORD=/d' .env
        sed -i 's/^SESSION_DRIVER=.*/SESSION_DRIVER=file/' .env
        sed -i 's/^CACHE_DRIVER=.*/CACHE_DRIVER=file/' .env
        sed -i 's/^CACHE_STORE=.*/CACHE_STORE=file/' .env
        sed -i 's/^QUEUE_CONNECTION=.*/QUEUE_CONNECTION=sync/' .env
        sed -i 's/^BROADCAST_CONNECTION=.*/BROADCAST_CONNECTION=log/' .env
        sed -i 's/^APP_ENV=.*/APP_ENV=local/' .env
        sed -i 's/^APP_DEBUG=.*/APP_DEBUG=true/' .env
        sed -i 's/^APP_URL=.*/APP_URL=http:\/\/127.0.0.1:8000/' .env
        sed -i 's/^ASSET_URL=.*/ASSET_URL=http:\/\/127.0.0.1:8000/' .env
        echo "SESSION_PATH=/" >> .env
        mkdir -p database
        touch database/database.sqlite
        chmod 666 database/database.sqlite
        php artisan key:generate
        php artisan migrate:fresh --seed --force
        # Verify test user and data exist
        echo "=== Verifying database setup ==="
        php artisan tinker --execute="echo 'Test user exists: ' . (App\Models\User::where('email', 'test@example.com')->exists() ? 'YES' : 'NO');"
        php artisan tinker --execute="echo 'Total users: ' . App\Models\User::count();"
        php artisan tinker --execute="echo 'Total resources: ' . App\Models\Resource::count();"
        # Prepare ROR test data for Playwright tests
        mkdir -p storage/app/private/ror
        cat > storage/app/private/ror/ror-affiliations.json << 'EOF'
        [
          {"prefLabel":"University of Potsdam","rorId":"https://ror.org/03yqp9m85","otherLabel":["Universität Potsdam","UP"]},
          {"prefLabel":"Max Planck Institute for Gravitational Physics","rorId":"https://ror.org/00e6p9196","otherLabel":["Albert Einstein Institute","AEI","Max-Planck-Institut für Gravitationsphysik"]},
          {"prefLabel":"Helmholtz Centre Potsdam - GFZ German Research Centre for Geosciences","rorId":"https://ror.org/04z8jg394","otherLabel":["GFZ","GeoForschungsZentrum Potsdam"]},
          {"prefLabel":"ETH Zurich","rorId":"https://ror.org/05a28rw58","otherLabel":["ETH Zürich","Swiss Federal Institute of Technology Zurich","Eidgenössische Technische Hochschule Zürich"]},
          {"prefLabel":"University of Zurich","rorId":"https://ror.org/02crff812","otherLabel":["Universität Zürich","UZH"]},
          {"prefLabel":"Massachusetts Institute of Technology","rorId":"https://ror.org/042nb2s44","otherLabel":["MIT"]},
          {"prefLabel":"Stanford University","rorId":"https://ror.org/00f54p054","otherLabel":["Stanford"]},
          {"prefLabel":"Harvard University","rorId":"https://ror.org/03vek6s52","otherLabel":["Harvard"]},
          {"prefLabel":"University of Cambridge","rorId":"https://ror.org/013meh722","otherLabel":["Cambridge University","Cambridge"]},
          {"prefLabel":"University of Oxford","rorId":"https://ror.org/052gg0110","otherLabel":["Oxford University","Oxford"]},
          {"prefLabel":"Technische Universität Berlin","rorId":"https://ror.org/03v4gjf40","otherLabel":["TU Berlin","Technical University of Berlin"]},
          {"prefLabel":"Ludwig Maximilian University of Munich","rorId":"https://ror.org/05591te55","otherLabel":["LMU Munich","Universität München","LMU"]},
          {"prefLabel":"Freie Universität Berlin","rorId":"https://ror.org/046ak2485","otherLabel":["Free University of Berlin","FU Berlin"]},
          {"prefLabel":"Humboldt-Universität zu Berlin","rorId":"https://ror.org/01hcx6992","otherLabel":["Humboldt University of Berlin","HU Berlin"]},
          {"prefLabel":"University of California, Berkeley","rorId":"https://ror.org/01an7q238","otherLabel":["UC Berkeley","Berkeley"]},
          {"prefLabel":"California Institute of Technology","rorId":"https://ror.org/05dxps055","otherLabel":["Caltech","CIT"]},
          {"prefLabel":"Princeton University","rorId":"https://ror.org/00hx57361","otherLabel":["Princeton"]},
          {"prefLabel":"Yale University","rorId":"https://ror.org/03v76x132","otherLabel":["Yale"]},
          {"prefLabel":"Columbia University","rorId":"https://ror.org/00hj8s172","otherLabel":["Columbia"]},
          {"prefLabel":"University of Tokyo","rorId":"https://ror.org/057zh3y96","otherLabel":["東京大学","Todai","UTokyo"]},
          {"prefLabel":"Kyoto University","rorId":"https://ror.org/02kpeqv85","otherLabel":["京都大学","Kyodai"]}
        ]
        EOF
        # GCMD vocabulary tests are skipped in CI (run locally with real data)
        # See: docs/PLAYWRIGHT_GCMD_FIXTURES.md
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps ${{ matrix.browser }}
    - name: Start Laravel server
      run: php artisan serve --host=127.0.0.1 --port=8000 &
      env:
        APP_ENV: local
        APP_DEBUG: true
        APP_URL: http://127.0.0.1:8000
        ASSET_URL: http://127.0.0.1:8000
        DB_CONNECTION: sqlite
        SESSION_DRIVER: file
        SESSION_PATH: /
        CACHE_DRIVER: file
        QUEUE_CONNECTION: sync
        BROADCAST_DRIVER: log
    - name: Wait for server to be ready
      run: |
        echo "Waiting for Laravel server to start..."
        for i in {1..60}; do
          if curl -sf http://127.0.0.1:8000 > /dev/null 2>&1; then
            echo "✅ Server is ready after $i seconds!"
            curl -I http://127.0.0.1:8000 || true
            sleep 2  # Extra grace period
            exit 0
          fi
          echo "⏳ Attempt $i/60..."
          sleep 1
        done
        echo "❌ Server failed to start within 60 seconds"
        # Show Laravel logs for debugging
        cat storage/logs/laravel.log || echo "No Laravel logs found"
        exit 1
    - name: Verify login page is accessible
      run: |
        echo "=== Testing login page ==="
        curl -s http://127.0.0.1:8000/login | grep -q "login" && echo "✅ Login page accessible" || echo "❌ Login page NOT accessible"
    - name: Run Playwright tests
      run: npx playwright test --project=${{ matrix.browser }}
      env:
        CI: true
    - name: Stop Laravel server
      if: always()
      run: |
        pkill -f "php artisan serve" || true
        echo "Server cleanup completed"
    - uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30