name: Playwright UI Tests
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    name: Playwright (${{ matrix.browser }})
    steps:
    - uses: actions/checkout@v4
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        tools: composer:v2
    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
    - name: Install Node dependencies
      run: npm ci
    - name: Install PHP dependencies
      run: composer install --no-interaction --prefer-dist --optimize-autoloader
    - name: Build assets
      run: npm run build
      env:
        NODE_ENV: development
        VITE_APP_URL: http://127.0.0.1:8000
    - name: Rebuild assets for CI
      run: |
        echo "=== VITE MANIFEST BEFORE ==="
        cat public/build/manifest.json | head -10 || echo "No manifest found"
        
        # Clear any cached asset URLs
        rm -rf public/build/.vite
        
        # Rebuild with CI environment
        npm run build
        
        echo "=== VITE MANIFEST AFTER ==="
        cat public/build/manifest.json | head -10 || echo "No manifest found"
      env:
        NODE_ENV: production
        APP_ENV: local
        APP_URL: http://127.0.0.1:8000
        ASSET_URL: http://127.0.0.1:8000
    - name: Prepare application
      run: |
        cp .env.example .env
        sed -i 's/^DB_CONNECTION=.*/DB_CONNECTION=sqlite/' .env
        sed -i '/^DB_HOST=/d' .env
        sed -i '/^DB_PORT=/d' .env  
        sed -i '/^DB_DATABASE=/d' .env
        sed -i '/^DB_USERNAME=/d' .env
        sed -i '/^DB_PASSWORD=/d' .env
        sed -i 's/^SESSION_DRIVER=.*/SESSION_DRIVER=file/' .env
        sed -i 's/^CACHE_DRIVER=.*/CACHE_DRIVER=file/' .env
        sed -i 's/^CACHE_STORE=.*/CACHE_STORE=file/' .env
        sed -i 's/^QUEUE_CONNECTION=.*/QUEUE_CONNECTION=sync/' .env
        sed -i 's/^BROADCAST_CONNECTION=.*/BROADCAST_CONNECTION=log/' .env
        sed -i 's/^APP_ENV=.*/APP_ENV=local/' .env
        sed -i 's/^APP_DEBUG=.*/APP_DEBUG=true/' .env
        sed -i 's/^APP_URL=.*/APP_URL=http:\/\/127.0.0.1:8000/' .env
        sed -i 's/^ASSET_URL=.*/ASSET_URL=http:\/\/127.0.0.1:8000/' .env
        echo "SESSION_PATH=/" >> .env
        mkdir -p database
        touch database/database.sqlite
        chmod 666 database/database.sqlite
        echo "Database created at: $(pwd)/database/database.sqlite"
        ls -la database/
        echo "=== .env configuration ==="
        cat .env | grep -E "(APP_|DB_|SESSION_|CACHE_|QUEUE_|ASSET_|BROADCAST_)"
        echo "============================="
        php artisan key:generate
        php artisan config:clear
        php artisan cache:clear
        php artisan view:clear
        php artisan migrate:fresh --seed --force
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps ${{ matrix.browser }}
    - name: Start Laravel server
      run: php artisan serve --host=127.0.0.1 --port=8000 &
      env:
        APP_ENV: local
        APP_DEBUG: true
        APP_URL: http://127.0.0.1:8000
        ASSET_URL: http://127.0.0.1:8000
        DB_CONNECTION: sqlite
        SESSION_DRIVER: file
        SESSION_PATH: /
        CACHE_DRIVER: file
        QUEUE_CONNECTION: sync
        BROADCAST_DRIVER: log
    - name: Wait for server to be ready
      run: |
        timeout 30 bash -c 'until curl -s http://127.0.0.1:8000 > /dev/null; do sleep 1; done'
        echo "Server is ready!"
    - name: Debug login page content
      run: |
        echo "=== DEBUGGING LOGIN PAGE ==="
        curl -s "http://127.0.0.1:8000/login" > login_page.html
        echo "Login page downloaded successfully"
        
        echo "Content size: $(wc -c < login_page.html) bytes"
        echo "First 1000 characters:"
        head -c 1000 login_page.html
        echo ""
        echo "=== Searching for login form elements ==="
        
        echo "Lines containing 'email':"
        grep -i "email" login_page.html || echo "No email elements found"
        echo "Lines containing 'input':"
        grep -i "input" login_page.html || echo "No input elements found"
        echo "Lines containing 'label':"
        grep -i "label" login_page.html || echo "No label elements found"
        echo "Lines containing 'form':"
        grep -i "form" login_page.html || echo "No form elements found"
        
        echo "=== ASSET LOADING ANALYSIS ==="
        echo "JavaScript files referenced:"
        grep -o 'src="[^"]*\.js[^"]*"' login_page.html | sed 's/src="//g' | sed 's/"//g' || echo "No JS files found"
        
        echo "CSS files referenced:"
        grep -o 'href="[^"]*\.css[^"]*"' login_page.html | sed 's/href="//g' | sed 's/"//g' || echo "No CSS files found"
        
        echo "Testing asset accessibility:"
        for asset in $(grep -o 'src="[^"]*\.js[^"]*"' login_page.html | sed 's/src="//g' | sed 's/"//g' | head -3); do
          echo "Testing JS: $asset"
          curl -s -o /dev/null -w "Status: %{http_code}, Size: %{size_download} bytes\n" "http://127.0.0.1:8000$asset" || echo "Failed to fetch $asset"
        done
        
        for asset in $(grep -o 'href="[^"]*\.css[^"]*"' login_page.html | sed 's/href="//g' | sed 's/"//g' | head -3); do
          echo "Testing CSS: $asset"
          curl -s -o /dev/null -w "Status: %{http_code}, Size: %{size_download} bytes\n" "http://127.0.0.1:8000$asset" || echo "Failed to fetch $asset"
        done
        
        echo "=== APP CONTAINER ANALYSIS ==="
        echo "Inertia app container:"
        grep -i "app\|inertia" login_page.html || echo "No app container found"
        echo "Body content:"
        grep -A 10 -B 2 "<body" login_page.html || echo "No body found"
        
        echo "=== VITE MANIFEST CHECK ==="
        echo "Checking for Vite manifest:"
        ls -la public/build/ 2>/dev/null || echo "No build directory found"
        if [ -f "public/build/manifest.json" ]; then
          echo "Vite manifest exists:"
          cat public/build/manifest.json | head -20
        else
          echo "No Vite manifest found!"
        fi
        
        echo "=== END DEBUG ==="
    - name: Run Playwright tests
      run: npx playwright test --project=${{ matrix.browser }}
      env:
        CI: true
    - name: Stop Laravel server
      if: always()
      run: |
        pkill -f "php artisan serve" || true
        echo "Server cleanup completed"
    - uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30